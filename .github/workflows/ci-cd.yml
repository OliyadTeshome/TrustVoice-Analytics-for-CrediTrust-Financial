name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run linting
      run: |
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run tests
      run: |
        python -m pytest tests/ -v --cov=src --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety bandit

    - name: Run security checks
      run: |
        safety check
        bandit -r src/ -f json -o bandit-report.json || true

    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: bandit-report.json

  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Build application
      run: |
        echo "Building TrustVoice Analytics application..."
        python -c "import src.app; import src.rag_pipeline; print('✅ Build successful')"

    - name: Create deployment package
      run: |
        mkdir -p dist
        cp -r src/ dist/
        cp requirements.txt dist/
        cp README.md dist/
        cp -r data/ dist/ || echo "Data directory not found, skipping"
        tar -czf trustvoice-analytics.tar.gz -C dist .

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: trustvoice-analytics-build
        path: trustvoice-analytics.tar.gz

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: trustvoice-analytics-build

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Example: Deploy to a staging server
        # scp trustvoice-analytics.tar.gz user@staging-server:/app/
        # ssh user@staging-server "cd /app && tar -xzf trustvoice-analytics.tar.gz"
        echo "✅ Staging deployment completed"

  deploy-production:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: trustvoice-analytics-build

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Example: Deploy to a production server
        # scp trustvoice-analytics.tar.gz user@prod-server:/app/
        # ssh user@prod-server "cd /app && tar -xzf trustvoice-analytics.tar.gz"
        echo "✅ Production deployment completed"

  notify:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy-staging.result }}" == "success" ] || [ "${{ needs.deploy-production.result }}" == "success" ]; then
          echo "✅ Deployment completed successfully"
        else
          echo "❌ Deployment failed"
        fi 